<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/debian" basedir="." default="dependencies-init">

    <!-- Readin enviroment properties to env property -->
    <property environment="env" />

    <!-- Generate a timestamp to time.stamp property -->
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd-HHmmss"/>
    </tstamp>

    <!-- Read in build property files -->
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/buildfiles/${target-os.major.version}/build.default.properties"/>
    <property file="${basedir}/buildfiles/generic/build.default.properties"/>

    <!-- Set directory properties -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="tests.dir" value="${basedir}/tests" />
    <property name="temp.dir" value="${basedir}/tmp" />
    <property name="reports.dir" value="${basedir}/reports" />

    <!-- initialize the library specific properties -->
    <property name="codepool" value="vendor"/>

    <!-- initialize the directory where we can find the real build files -->
    <property name="dependency.dir" value ="${basedir}/${codepool}" />
    <property name="package.dir" value="${dependency.dir}/package" />
    <property name="package.remote-location" value="https://github.com/appserver-io-dist/package.git" />

    <!-- ==================================================================== -->
    <!-- Import the local tests/*files                                        -->
    <!-- ==================================================================== -->
    <import file="tests/${target-os.major.version}/test.xml" optional="true" />
    <import file="tests/generic/test.xml" optional="true" />

    <!-- ==================================================================== -->
    <!-- Import the package build files if they are present                   -->
    <!-- ==================================================================== -->
    <import file="${package.dir}/common.xml" optional="true" />

    <!-- ==================================================================== -->
    <!-- Cleans the target directories                                        -->
    <!-- ==================================================================== -->
    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${temp.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the build directories                                         -->
    <!-- ==================================================================== -->
    <target name="clean-build"  depends="prepare-build">
        <delete includeemptydirs="true" quiet="false" verbose="false" failonerror="true">
            <fileset dir="${build.dir}" includes="**/*"/>
        </delete>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the reports directories                                       -->
    <!-- ==================================================================== -->
    <target name="clean-reports"  depends="prepare-reports">
        <delete includeemptydirs="true" quiet="false" verbose="false" failonerror="true">
            <fileset dir="${reports.dir}" includes="**/*"/>
        </delete>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the target dir                                              -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean">
        <mkdir dir="${target.dir}" />
        <mkdir dir="${temp.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the reports environment                                     -->
    <!-- ==================================================================== -->
    <target name="prepare-reports">
        <mkdir dir="${reports.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the build environment                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-build">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if the package helper libary is present                       -->
    <!-- ==================================================================== -->
    <target name="package-library-present">
        <!-- check for the existence of the most central file of the package library -->
        <available file="${package.dir}/common.xml" property="package-library.present" />
    </target>

    <!-- ==================================================================== -->
    <!-- Loads all dependencies needed for the execution of build targets.    -->
    <!-- Not to be confused with the loading of dependencies needed for the   -->
    <!-- built packages!                                                      -->
    <!-- ==================================================================== -->
    <target name="dependencies-init" depends="package-library-present" unless="package-library.present">
        <!-- create the target dir -->
        <mkdir dir="${dependency.dir}" />
        <!-- clone the latest version of our package library -->
        <exec dir="${dependency.dir}" executable="git">
            <arg line="clone ${package.remote-location}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Propagates the recent build to the official release sites, updates   -->
    <!-- release lists, etc.. Not to be mistaken for the "publish" target     -->
    <!-- ==================================================================== -->
    <target name="release" description="Propagates the recent build to the official release sites, updates release lists, etc..">
        <echo message="Now starting release cycle"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Publishes the recent build to any snapshot hubs, etc.. Not to be     -->
    <!-- mistaken for the "release" target                                    -->
    <!-- ==================================================================== -->
    <target name="publish" description="Publishes the recent build to any snapshot hubs, etc..">
        <echo message="Now starting publish cycle"/>
        <!-- upload the build artifacts to the snapshot hub -->
        <antcall target="copy-to-hub" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will provide the appserver.src.version property if not defined       -->
    <!-- already                                                              -->
    <!-- ==================================================================== -->
    <target name="get-appserver-src-version">
        <!-- we have to get the source first -->
        <antcall target="get-appserver-src" />
        <!-- get lastest tag version -->
        <exec dir="${temp.dir}/appserver-src" executable="git" outputProperty="appserver.src.version">
            <arg line="describe --abbrev=0 --tags" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will split the github tag into a semver version (e.g. 1.0.0) and a   -->
    <!-- suffix (e.g. beta)                                                   -->
    <!-- ==================================================================== -->
    <target name="prepare-src-version-parts" depends="get-appserver-src-version">
        <!-- filter the version string -->
        <filter-version param="${appserver.src.version}" />
        <property name="appserver.src.semver" value="${RESULT_VERSION}" />
        <condition property="appserver.src.suffix" value="+${RESULT_BUILD-NUMBER}">
            <not>
                <equals arg1="${RESULT_BUILD-NUMBER}" arg2="" />
            </not>
        </condition>
        <property name="appserver.src.suffix" value="${RESULT_BUILD-NUMBER}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package with the appserver sources                     -->
    <!-- ==================================================================== -->
    <target name="create-appserver-dist-deb" depends="prepare-src-version-parts" description="Creates a DEB package with appserver sources">
        <!-- prepare the dist creation -->
        <antcall target="prepare-appserver-dist" />
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}/src">
            <fileset dir="${src.dir}/generic/dist">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/src">
            <fileset dir="${src.dir}/generic/dist">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- overwrite the generic files with the version sepcific ones, do not fail if there are none -->
        <copy todir="${target.dir}/src" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${src.dir}/${target-os.major.version}/dist">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/src" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${src.dir}/${target-os.major.version}/dist">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- set the permissions of the install script -->
        <chmod perm="755" file="${target.dir}/src/DEBIAN/postinst" />
        <chmod perm="755" file="${target.dir}/src/DEBIAN/prerm" />
        <!-- create the .deb file -->
        <exec dir="${target.dir}" executable="fakeroot" failonerror="true">
            <arg line="dpkg-deb --build ${target.dir}/src ${build.dir}/${build.name.prefix}dist_${appserver.src.semver}-${build.number}${appserver.src.suffix}~deb${target-os.major.version}_${os.architecture}.${build.name.ext}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package for the appserver runtime                      -->
    <!-- ==================================================================== -->
    <target name="create-appserver-runtime-deb" depends="prepare">
        <!-- get runtime in specific version as tar.gz -->
        <get src="${appserver.runtime.url}" dest="${temp.dir}/${appserver.runtime.package}.tar.gz"/>
        <untar src="${temp.dir}/${appserver.runtime.package}.tar.gz" dest="${target.dir}/opt" compression="gzip" />
        <mkdir dir="${target.dir}/opt" />
        <exec executable="tar">
            <arg value="-xzf"/>
            <arg value="${temp.dir}/${appserver.runtime.package}.tar.gz"/>
            <arg value="-p"/>
            <arg value="-C"/>
            <arg value="${target.dir}/opt"/>
        </exec>
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/generic/runtime">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/generic/runtime">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- overwrite the generic files with the version sepcific ones, do not fail if there are none -->
        <copy todir="${target.dir}" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${src.dir}/${target-os.major.version}/runtime">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${src.dir}/${target-os.major.version}/runtime">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- create the .deb file -->
        <exec dir="${target.dir}" executable="dpkg-deb" failonerror="true">
            <arg line="--build ${target.dir} ${build.dir}/${appserver.runtime.package}.${build.name.ext}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will prepare the environment to run a vagrant box in                 -->
    <!-- ==================================================================== -->
    <target name="prepare-build-environment" depends="prepare, clean-build, clean-reports">
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${basedir}">
               <include name="build.*"/>
               <include name="buildfiles/**"/>
               <include name="${codepool}/**"/>
            </fileset>
        </copy>
        <!-- expand the properties within our box configuration -->
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${basedir}/buildfiles/generic">
                <include name="Vagrantfile"/>
                <include name="provision.sh"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- overwrite the generic files with the version sepcific ones, do not fail if there are none -->
        <copy todir="${temp.dir}" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${basedir}/buildfiles/${target-os.major.version}">
                <include name="Vagrantfile"/>
                <include name="provision.sh"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- prepare a tmp dir for work within the VM -->
        <mkdir dir="${temp.dir}/tmp" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will prepare the environment to run a testing vagrant box in         -->
    <!-- ==================================================================== -->
    <target name="prepare-test-environment" depends="prepare, clean-reports">
        <!-- copy the basic build files -->
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${basedir}">
                <include name="build.*"/>
                <include name="buildfiles/**"/>
                <include name="${codepool}/**"/>
            </fileset>
        </copy>
        <copy todir="${temp.dir}/tests" failonerror="true">
            <fileset dir="${basedir}/tests">
                <include name="*/**"/>
                <exclude name="*/provision.sh"/>
            </fileset>
        </copy>
        <!-- expand the properties within our box configuration -->
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${tests.dir}/generic">
                <include name="provision.sh"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- overwrite the generic files with the version sepcific ones, do not fail if there are none -->
        <copy todir="${temp.dir}" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${tests.dir}/${target-os.major.version}">
                <include name="provision.sh"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- expand the properties within our box configuration -->
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${basedir}/buildfiles/generic">
                <include name="Vagrantfile"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- overwrite the generic files with the version sepcific ones, do not fail if there are none -->
        <copy todir="${temp.dir}" overwrite="true" failonerror="false" quiet="true">
            <fileset dir="${basedir}/buildfiles/${target-os.major.version}">
                <include name="Vagrantfile"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- prepare a tmp dir for work within the VM -->
        <mkdir dir="${temp.dir}/tmp" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates all DEB packages locally                                     -->
    <!-- ==================================================================== -->
    <target name="local-build" depends="prepare-build, create-appserver-dist-deb, create-appserver-runtime-deb">
        <!-- nothing to do here -->
    </target>

</project>
