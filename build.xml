<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/debian" basedir="." default="build">

    <!-- Readin enviroment properties to env property -->
    <property environment="env" />

    <!-- Generate a timestamp to time.stamp property -->
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd_HHmmss"/>
    </tstamp>

    <!-- Readin build property files -->
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>

    <!-- Set directory properties -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="temp.dir" value="${basedir}/tmp" />

    <!-- ==================================================================== -->
    <!-- Cleans the target directories                                        -->
    <!-- ==================================================================== -->
    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${temp.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the build directories                                         -->
    <!-- ==================================================================== -->
    <target name="clean-build">
        <delete dir="${build.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the target dir                                              -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean">
        <mkdir dir="${target.dir}" />
        <mkdir dir="${temp.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the build environment                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-build" depends="clean-build">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Installs composer in target directory                                -->
    <!-- ==================================================================== -->
    <target name="install-composer">
        <get src="https://getcomposer.org/installer" dest="${temp.dir}/composer-installer" />
        <exec dir="${temp.dir}" executable="php">
            <arg value="composer-installer" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-appserver-dist" depends="prepare">
        <!-- install local composer -->
        <antcall target="install-composer" />
        <!-- get appserver sources in specific version -->
        <get src="${appserver.src.url}" dest="${temp.dir}/appserver-src-${appserver.src.version}.zip" />
        <!-- unzip to target dir -->
        <unzip src="${temp.dir}/appserver-src-${appserver.src.version}.zip" dest="${temp.dir}" />

        <move todir="${target.dir}/opt/appserver">
            <fileset dir="${temp.dir}/appserver-${appserver.src.version}"/>
        </move>

        <!-- install dependencies via composer and let postinstall-scripts proceed -->
        <exec dir="${target.dir}/opt/appserver" executable="php">
            <arg line="${temp.dir}/composer.phar install --prefer-dist --quiet --no-interaction --ignore-platform-reqs"/>
        </exec>
        <!-- create deploy folder if not exists -->
        <mkdir dir="${target.dir}//opt/appserver/deploy"/>
        <!-- deploy example app by putting it into deploy folder of runtime -->
        <get src="${appserver.apps.example.url}" dest="${target.dir}/opt/appserver/deploy/example.phar" />
        <!-- create the .dodeploy files -->
        <touch file="${target.dir}//opt/appserver/deploy/example.phar.dodeploy" />
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/dist">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/dist">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- set the permissions of the postinstall script -->
        <chmod perm="755" file="${target.dir}/DEBIAN/postinst" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package with the appserver sources                     -->
    <!-- ==================================================================== -->
    <target name="create-appserver-dist-deb" depends="prepare-appserver-dist" description="Creates a DEB package with appserver sources">
        <!-- create the .deb file -->
        <exec dir="${target.dir}" executable="dpkg-deb" failonerror="true">
            <arg line="--build ${target.dir} ${build.dir}/${build.name.prefix}dist-${appserver.src.version}.${build.number}${build.name.suffix}.${build.name.ext}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package for the appserver runtime                      -->
    <!-- ==================================================================== -->
    <target name="create-appserver-runtime-deb" depends="prepare">
        <!-- get runtime in specific version as tar.gz -->
        <get src="${appserver.runtime.url}" dest="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz"/>
        <untar src="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz" dest="${target.dir}/opt" compression="gzip" />
        <mkdir dir="${target.dir}/opt" />
        <exec executable="tar">
            <arg value="-xzf"/>
            <arg value="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz"/>
            <arg value="-p"/>
            <arg value="-C"/>
            <arg value="${target.dir}/opt"/>
        </exec>
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/runtime">
                <include name="**/*"/>
                <exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}">
            <fileset dir="${src.dir}/runtime">
                <include name="DEBIAN/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- set the permissions of the postinstall script -->
        <chmod perm="755" file="${target.dir}/DEBIAN/postinst" />
        <!-- create the .deb file -->
        <exec dir="${target.dir}" executable="dpkg-deb" failonerror="true">
            <arg line="--build ${target.dir} ${build.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.${build.name.ext}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="upload-builds" description="Uploads any built package to the file-server.">
        <echo message="Now try to upload all builds to file-server"/>
        <exec executable="scp" failonerror="true">
            <arg line="-o StrictHostKeyChecking=no -i ${user.home}/.ssh/id_rsa ${build.dir}/* ${build.server.user}@${build.server.host}:${build.server.upload-path}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates all DEB packages and uploads them to builds file-server      -->
    <!-- ==================================================================== -->
    <target name="build" depends="prepare-build">
        <!-- build appserver-dist -->
        <antcall target="create-appserver-dist-deb" />
        <!-- build appserver-runtime -->
        <antcall target="create-appserver-runtime-deb" />
        <!-- upload stuff to builds file-server -->
        <antcall target="upload-builds"/>
    </target>

</project>