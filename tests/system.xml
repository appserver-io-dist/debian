<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/fedora-tests-system" basedir=".." default="run-system-tests">

    <!-- ==================================================================== -->
    <!-- Runs all available system tests                                 -->
    <!-- ==================================================================== -->
    <target name="run-system-tests">
        <!-- test runtime installation -->
        <antcall target="test-install-runtime" />
        <!-- test dist installation -->
        <antcall target="test-install-dist" />
        <!-- test if the services are running -->
        <antcall target="test-services-running" />
        <!-- test if there have been errors during startup -->
        <antcall target="test-errors-log-exists" />
        <!-- test if the services are reachable -->
        <antcall target="test-services-reachable" />
        <!-- test if we can stop the services -->
        <antcall target="test-services-stop" />
        <!-- test if we can start the services -->
        <antcall target="test-services-start" />
        <!-- test if bundled apps were deployed correctly -->
        <antcall target="test-bundled-apps-deployed" />
        <!-- test if the "configtest" command works -->
        <antcall target="test-configtest-command" />
        <!-- test if the bundled binaries and executables are present and usable -->
        <antcall target="test-executable-exist" />
        <!-- test if the jmeter testplan runs through without errors -->
        <antcall target="test-jmeter-example-testplan" />
    </target>

    <!-- ==================================================================== -->
    <!-- Runs all available system tests within an expected vagrant VM   -->
    <!-- ==================================================================== -->
    <target name="run-vagrant-system-tests">
        <!-- map the vagrant name according to our prepared environment -->
        <property name="vagrant-box.name" value="${vagrant-box.prefix}Test" />
        <!-- prepare the test environment -->
        <antcall target="prepare-test-environment" />
        <!-- start our vagrant box -->
        <antcall target="start-vagrant-box" />
        <!-- invoke original system tests within vagrant box -->
        <exec dir="${temp.dir}" executable="vagrant">
            <arg line="ssh -c 'sudo ant run-system-tests -buildfile ${vagrant.basedir}/build.xml -Dgithub.oauth.token=${github.oauth.token} -Dbuild.number=${build.number} -Dtarget-os.version=${target-os.version}'" />
        </exec>
        <!-- destroy the box after all work is done -->
        <antcall target="destroy-vagrant-box" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the runtime package can be installed correctly              -->
    <!-- ==================================================================== -->
    <target name="test-install-runtime">
        <!-- try to install the appserver runtime -->
        <antcall target="install-appserver-runtime" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the dist package can be installed correctly                 -->
    <!-- ==================================================================== -->
    <target name="test-install-dist" depends="prepare-src-version-parts">
        <!-- try to install the appserver dist package -->
        <antcall target="install-appserver-dist" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled services are currently running                  -->
    <!-- ==================================================================== -->
    <target name="test-services-running">
        <!-- test if the appserver service is running -->
        <echo message="Test if service 'appserver' is running." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="status appserver" />
        </exec>
        <!-- test if the appserver watcher service is running -->
        <echo message="Test if service 'appserver-watcher' is running." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="status appserver-watcher" />
        </exec>
        <!-- test if the appserver php-fpm service is running -->
        <echo message="Test if service 'appserver-php5-fpm' is running." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="status appserver-php5-fpm" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled services are currently in a stopped state       -->
    <!-- ==================================================================== -->
    <target name="test-services-stopped">
        <!-- test if the appserver service is inactive -->
        <echo message="Test if service 'appserver' is in a stopped state." />
        <exec dir="${test.basedir}" executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value='$(test "`systemctl is-active appserver`" != "active")' />
        </exec>
        <!-- test if the appserver-watcher service is inactive -->
        <echo message="Test if service 'appserver-watcher' is in a stopped state." />
        <exec dir="${test.basedir}" executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value='$(test "`systemctl is-active appserver-watcher`" != "active")' />
        </exec>
        <!-- test if the appserver-php5-fpm service is inactive -->
        <echo message="Test if service 'appserver-php5-fpm' is in a stopped state." />
        <exec dir="${test.basedir}" executable="bash" failonerror="true">
            <arg value="-c" />
            <arg value='$(test "`systemctl is-active appserver-php5-fpm`" != "active")' />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled apps have been deployed correctly               -->
    <!-- ==================================================================== -->
    <target name="test-bundled-apps-deployed">
        <!-- test if the example app exists in the webapps directory -->
        <echo message="Test if app 'example' has been deployed and flagged correctly." />
        <available file="${appserver-base.dir}/webapps/example/WEB-INF/web.xml" property="example_app.present"/>
        <fail unless="example_app.present" message="Example app seem to not have been deployed correctly."/>
        <!-- also test for the deploy flags -->
        <available file="${appserver-base.dir}/deploy/example.phar.deployed" property="example_deploy_flag.present"/>
        <fail unless="example_deploy_flag.present" message="Example app deployed but incorrect deploy flag."/>
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the additional "configtest" command works correctly         -->
    <!-- ==================================================================== -->
    <target name="test-configtest-command">
        <exec dir="${test.basedir}" executable="appserverctl" failonerror="true">
            <arg line="configtest" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled services can be started correctly               -->
    <!-- ==================================================================== -->
    <target name="test-services-start">
        <echo message="Test starting service 'appserver'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="start appserver" />
        </exec>
        <echo message="Test starting service 'appserver-watcher'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="start appserver-watcher" />
        </exec>
        <echo message="Test starting service 'appserver-php5-fpm'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="start appserver-php5-fpm" />
        </exec>

        <echo message="Starting seem to have gone well, test service states now" />

        <!-- tests if the services are running -->
        <antcall target="test-services-running" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled services can be restarted correctly             -->
    <!-- ==================================================================== -->
    <target name="test-services-restart">
        <echo message="Test restarting service 'appserver'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="restart appserver" />
        </exec>
        <echo message="Test restarting service 'appserver-watcher'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="restart appserver-watcher" />
        </exec>
        <echo message="Test restarting service 'appserver-php5-fpm'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="restart appserver-php5-fpm" />
        </exec>

        <echo message="Restart seem to have gone well, test service states now" />

        <!-- tests if the services are running -->
        <antcall target="test-services-running" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the bundled services can be stopped correctly               -->
    <!-- ==================================================================== -->
    <target name="test-services-stop">
        <echo message="Test stopping service 'appserver'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="stop appserver" />
        </exec>
        <echo message="Test stopping service 'appserver-watcher'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="stop appserver-watcher" />
        </exec>
        <echo message="Test stopping service 'appserver-php5-fpm'." />
        <exec dir="${test.basedir}" executable="systemctl" failonerror="true">
            <arg line="stop appserver-php5-fpm" />
        </exec>

        <echo message="Stopping seem to have gone well, test service states now" />

        <!-- tests if the services are running -->
        <antcall target="test-services-stopped" />
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the services can be reached over network                    -->
    <!-- ==================================================================== -->
    <target name="test-services-reachable">
        <echo message="Trying to connect to the HTTP server." />
        <waitfor maxwait="20" maxwaitunit="second" timeoutproperty="service.http.unreachable">
            <socket server="127.0.0.1" port="9080"/>
        </waitfor>
        <fail if="service.http.unreachable" message="The HTTP server could not be reached."/>

        <echo message="Trying to connect to the HTTPS server." />
        <waitfor maxwait="20" maxwaitunit="second" timeoutproperty="service.https.unreachable">
            <socket server="127.0.0.1" port="9443"/>
        </waitfor>
        <fail if="service.https.unreachable" message="The HTTPS server could not be reached."/>

        <echo message="Trying to connect to the PHP-FPM service." />
        <waitfor maxwait="20" maxwaitunit="second" timeoutproperty="service.php-fpm.unreachable">
            <socket server="127.0.0.1" port="9010"/>
        </waitfor>
        <fail if="service.php-fpm.unreachable" message="The PHP-FPM service could not be reached."/>
    </target>

    <!-- ==================================================================== -->
    <!-- Tests if the PHP errors log has been created (it should not)         -->
    <!-- ==================================================================== -->
    <target name="test-errors-log-exists">
        <!-- test if a php_errors.log file has been created -->
        <echo message="Test for existence of 'php_errors.log' log file." />
        <available file="${appserver-base.dir}/var/log/php_errors.log" property="php_errors.present"/>
        <fail if="php_errors.present" message="php_errors.log file has been created."/>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Tests if the packaged executables exist                             -->
    <!-- ==================================================================== -->
    <target name="test-executable-exist">
        <!-- test if a composer binary and ecexutable is present -->
        <echo message="Test if a composer binary and ecexutable are present and executable." />
        <available file="${appserver-base.dir}/bin/composer.phar" property="composer-binary.present"/>
        <fail unless="composer-binary.present" message="The composer binary could not be found."/>
        <available file="${appserver-base.dir}/bin/composer" property="composer-exec.present"/>
        <fail unless="composer-exec.present" message="The composer executable could not be found."/>
        <exec executable="${appserver-base.dir}/bin/composer" failonerror="true">
            <arg value="-V"/>
        </exec>
        <!-- test if a PHP binary and ecexutable is present -->
        <echo message="Test if a PHP binary is present and executable." />
        <available file="${appserver-base.dir}/bin/php" property="php-binary.present"/>
        <fail unless="php-binary.present" message="The PHP binary could not be found."/>
        <exec executable="${appserver-base.dir}/bin/php" failonerror="true">
            <arg value="--version"/>
        </exec>
        <!-- test if a PHAR binary and ecexutable is present -->
        <echo message="Test if a PHAR binary and ecexutable are present and executable." />
        <available file="${appserver-base.dir}/bin/phar.phar" property="phar-binary.present"/>
        <fail unless="phar-binary.present" message="The PHAR binary could not be found."/>
        <available file="${appserver-base.dir}/bin/phar" property="phar-exec.present"/>
        <fail unless="phar-exec.present" message="The PHAR executable could not be found."/>
        <exec executable="${appserver-base.dir}/bin/phar" failonerror="true">
            <arg value="version"/>
        </exec>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Tests if the jmeter testplan configured against the example app      -->
    <!-- does run without any errors                                          -->
    <!-- ==================================================================== -->
    <target name="test-jmeter-example-testplan">
        <!-- test if the testplan runs through -->
        <exec executable="${jmeter.vagrant.dir}/bin/jmeter" failonerror="true">
            <arg line="-n -t ${jmeter.example-test.path}/example-testplan.jmx -l ${vagrant-reports.dir}/system-example-testplan.jtl -Jon_error=stoptestnow"/>
        </exec>
    </target>

</project>
